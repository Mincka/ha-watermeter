## ---------------------------------------------------------------------------
## WMBUS METER D1 MINI 32 + CC1101 for Diehl IZAR RC 868 I R4 PL
## HARDWARE: ESP32 240MHz, 320KB RAM, 4MB Flash
## ---------------------------------------------------------------------------
substitutions:

  ## device settings
## device settings
  device_name_short: "water-meter-dm32-test"
  device_description: "TESTDEVICE: WasserzÃ¤hler Wemos D1 Mini 32, CUL - CC1101, IZAR module (Diehl IZAR RC 868 I R4 PL (SzczepanLeon) - find watermeters"
  projectname: "Diehl IZAR RC 868.Watermeter-Test"
  appversion: "2.0.8"

  ## logger settings
  log_level: "VERBOSE"  # not that logging need memory, so in production mode use "WARN"
  log_wmbus: "VERBOSE" # Loglevel for wmbus meters component
  log_baudrate: "0"   # use 115200 to enable serial UART port logging.

   ## all watermeters wmid: "0", your watermeter: wmid: !secret watermeterId
   ## wmid: "0"
  wmid: "0"

## ----------------------------------------------------------------
## HARDWARE: ESP32 240MHz, 320KB RAM, 4MB Flash
## ----------------------------------------------------------------
esp32:
  board: wemos_d1_mini32

## ----------------------------------------------------------------
## ESPHOME APPLICATION
## ----------------------------------------------------------------
esphome:
  name: ${device_name_short}
  comment: ${device_description}
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: false
  project:
    name: ${projectname}
    version: ${appversion}
  build_path: ./build/${device_name_short}
  on_boot:
    then:
      - logger.log:
          level: WARN
          tag: "system"
          format: "BOOTMESSAGE:${device_name_short} API is connected, Device ready!"
  on_shutdown:
    then:
      - logger.log:
          level: ERROR
          tag: "system"
          format: "BOOTMESSAGE:${device_name_short} is down!"

## ----------------------------------------------------------------
## External components
## ----------------------------------------------------------------
external_components:

  # uses the latest version from SzczepanLeon
  # https://github.com/SzczepanLeon/esphome-components
  # You can make ESPHome check the repository every time by setting this option to 0s
  - source: github://SzczepanLeon/esphome-components@main
    refresh: 0s
    components: [wmbus]

## ---------------------------------------------------
## LOGGER COMPONENT
## ---------------------------------------------------
logger:
  id: appslogger
  level: ${log_level}
  baud_rate: ${log_baudrate}
  logs:
    wmbus: ${log_wmbus}
    wMBus-lib: ${log_wmbus}
    sensor: WARN
    sensor.filter: WARN
    text_sensor: WARN
    api.service: ERROR
    json: ERROR
    mqtt: WARN
    scheduler: ERROR
    wifi: WARN
    component: ERROR
    api: WARN
    # internal_temperature: ERROR


## ---------------------------------------------------
## WIFI Settings
## ---------------------------------------------------
wifi:
# Enable fallback hotspot (captive portal) in case wifi connection fails
 ap:
    ssid: ${device_name_short}
    password: "the-simple-one"
    ap_timeout: 1s

captive_portal:

## ---------------------------------------------------
## Home Assistant API COMPONENT
## ---------------------------------------------------
api:
  id: wmd32tc
  port: 6053
  reboot_timeout: 0s

## ---------------------------------------------------
## OTA COMPONENT
## ---------------------------------------------------
ota:
  password: "wmi01-testcase"
  safe_mode: false
  on_begin:
    then:
      - logger.log:
          format: "OTA Start"
          tag: "OTA"
          level: WARN
  on_progress:
    then:
      - logger.log:
          level: WARN
          tag: "OTA"
          format: "OTA progress %0.1f%%"
          args: ["x"]
  on_end:
    then:
      - logger.log:
          format: "OTA End"
          tag: "OTA"
          level: WARN
  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          tag: "OTA"
          level: ERROR
          args: ["x"]

## ---------------------------------------------------
## COMPONENT WEBSERVER
## ---------------------------------------------------
web_server:
  local: true

## ---------------------------------------------------
## SNTP Time server
## ---------------------------------------------------
time:
  - platform: sntp
    id: time_sntp
    timezone: Europe/Berlin
    servers:
      - 0.at.pool.ntp.org
      - 0.pool.ntp.org
    on_time_sync:
      # Components should trigger on_time_sync when they update the system clock.
      then:
        - logger.log:
            level: WARN
            tag: "system"
            format: "Synchronized sntp clock"


## ---------------------------------------------------
##        WMBUS DEVICE D1MINI 32 --> CC1101
## ---------------------------------------------------
wmbus:
  mosi_pin: GPIO23  # MOSI Attached to Hardware SPI controller MOSI SPI Interface
  miso_pin: GPIO19  # MISO Attached to Hardware SPI controller MISO SPI Interface
  clk_pin: GPIO18   # SCK  Attached to Hardware SPI controller CLK
  cs_pin: GPIO5     # CSN  Attached to Hardware SPI controller, Controls Boot Mode; CS SPI Interface 10k Pull-Down, boot fails if pulled high !!!
  gdo0_pin: GPIO21  # SDA  Clock output. High Impedance !
  gdo2_pin: GPIO22  # SCL  FIFO status signals. High Impedance !

  # log_unknown (Optional): Show telegrams from not configured meters in log.
  log_unknown: True


## ---------------------------------------------------
## SENSORS
## ---------------------------------------------------
sensor:

  # watermeter
  - platform: wmbus
    meter_id: ${wmid}
    type: izar
    add_prefix: True

  # Wifi quality RSSI used by wifi_signal_db
  - platform: wifi_signal
    name: "Device WLAN RSSI Quality"
    id: wifi_signal_db
    update_interval: 60s
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

## ---------------------------------------------------
## SWITCHES
## ---------------------------------------------------
switch:

  # restarts the device
  - platform: restart
    name: "Restart Device"
    id: restart_switch
    icon: mdi:restart

  # save device boot (develop only)
  - platform: safe_mode
    name: "Restart (Safe Mode)"

  # reset the device to factory reset (develop only)
  - platform: factory_reset
    icon: mdi:lock-reset
    name: Restart factory default