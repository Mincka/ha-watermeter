---
## ------------------------------------------------------------------
## WMBUS NODEMCU V3 + CC1101 for Diehl IZAR RC 868 I R4 PL
##
## usage:  1. Using Homassistant API (discovery + devices)
##         2. Using Backup component (optional)
##         3. Using Syslog component (optional)
##
## This version shows data from the defined watermeter and
## uses the watermeterID (HEX) from the secrets.yaml file.
##
## WEBUI:   http://water-meter.local
## REST:    curl -i http://water-meter.local/text_sensor/watermeterdata
## SYSLOG:  tail -f /var/log/syslog | grep "water-meter"
## Backup:  http://water-meter.local/config.yaml
##          curl -v 'http://water-meter.local/config.yaml' --digest -u USERNAME:PASSWORD -o config.yaml
##
## ------------------------------------------------------------------
substitutions:
  device_name_short: "water-meter"
  device_description: "Watermeter NODEMCU V3 + CUL - CC1101, IZAR module (Diehl IZAR RC 868 I R4 PL (SzczepanLeon) - my Watermeter"
  projectname: "Diehl IZAR RC 868.Watermeter"
  appversion: "2.0.6"

  # logger settings
  log_level: "INFO"

## ----------------------------------------------------------------
## HARDWARE:  NODEMCU V3 ESP8266 80MHz, 80KB RAM, 4MB Flash
## ----------------------------------------------------------------
esp8266:
  board: nodemcuv2
  restore_from_flash: true

## ----------------------------------------------------------------
## ESPHOME APPLICATION
## ----------------------------------------------------------------
esphome:
  name: ${device_name_short}
  comment: ${device_description}
  project:
    name: ${projectname}
    version: ${appversion}
  build_path: ./build/${device_name_short}
  on_boot:
    # -100: At this priority, pretty much everything should already be initialized.
    # 200.0: Network connections like MQTT/native API are set up at this priority.
    priority: 200.0
    then:
      - globals.set:
          id: boot_counter
          value: !lambda "return id(boot_counter)+=1;"
      - logger.log:
          level: INFO
          tag: "BOOT"
          format: "BOOTMESSAGE:${device_name_short} API is connected, Device ready!"
  on_shutdown:
    priority: 700
    then:
      - logger.log:
          level: INFO
          tag: "BOOT"
          format: "BOOTMESSAGE:${device_name_short} is down!"

## ----------------------------------------------------------------
## External components
## ----------------------------------------------------------------
external_components:
  # uses the latest version from SzczepanLeon
  # https://github.com/SzczepanLeon/esphome-components
  # You can make ESPHome check the repository every time by setting this option to 0s
  - source: github://SzczepanLeon/esphome-components@main
    refresh: 0s
    components: [wmbus]

  # use local component from
  # https://github.com/zdzichu6969/esphome-components
  - source:
      type: local
      path: custom_components
    components: [backup]

  # use local component from
  # https://github.com/TheStaticTurtle/esphome_syslog
  - source:
      type: local
      path: custom_components
    components: [syslog]

## ---------------------------------------------------
## syslog service
## ---------------------------------------------------
syslog:
  ip_address: !secret syslog_server
  port: !secret syslog_port
  min_level: DEBUG
  enable_logger: true

# ----------------------------------------------------------------
# Save your ESPHome device configuration in firmware and and
# recover it if you lost source files.
# ----------------------------------------------------------------
backup:
  auth:
    username: !secret web_username
    password: !secret web_password
  force_update: false

## ----------------------------------------------------------------
## Global variables
## ----------------------------------------------------------------
globals:
  - id: boot_counter
    type: int
    restore_value: yes
    initial_value: "0"

  - id: last_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: current_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: hour_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: daily_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: yesterday_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: week_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: month_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: lastmonth_value
    type: float
    restore_value: yes
    initial_value: "0.00"

  - id: year_value
    type: float
    restore_value: yes
    initial_value: "0.00"

## ---------------------------------------------------
## WIFI Settings 3 wifis
## ---------------------------------------------------
wifi:
  id: wifi_nodemcu
  networks:
    - ssid: !secret ssid3_name
      password: !secret ssid3_pswd
      priority: 0
    - ssid: !secret ssid1_name
      password: !secret ssid1_pswd
      priority: 1
    - ssid: !secret ssid2_name
      password: !secret ssid2_pswd
      priority: 2
  domain: !secret domain

## ---------------------------------------------------
## The captive portal component in ESPHome is a
## fallback mechanism for when connecting to the
## configured WiFi fails.
## you can manually override the WiFi settings
## of the device
## ---------------------------------------------------
captive_portal:

logger:
  id: appslogger
  level: ${log_level}
  baud_rate: 0 #disable logging over uart

## ---------------------------------------------------
## OTA Updates
## ---------------------------------------------------
ota:
  password: !secret ota_pswd
  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          args: ["x"]

## ---------------------------------------------------
## LOCAL WEBSERVER, local settings - no internet
## ---------------------------------------------------
web_server:
  port: 80
  version: 2
  local: true

## ---------------------------------------------------
## Enable Home Assistant API
## ---------------------------------------------------
## Homeassistant service call:
##
## service: esphome.water_meter_set_water_val
## data:
##  water_val_hour: 0.03
##  water_val_day: 0.248
##  water_val_yesterday: 0.178
##  water_val_week: 0.248
##  water_val_month: 1.94
##  water_val_year: 14.256
##  water_val_lastmonth: 9.59
## ---------------------------------------------------
api:
  id: espapiwm_v3
  port: 6053
  reboot_timeout: 0s
  services:
    - service: set_watermeter_data
      variables:
        water_val_hour: float
        water_val_day: float
        water_val_yesterday: float
        water_val_week: float
        water_val_month: float
        water_val_year: float
        water_val_lastmonth: float
      then:
        - globals.set:
            id: hour_value
            value: !lambda |-
              if((water_val_hour) and (water_val_hour)>0.001){
                ESP_LOGI("main", "Set hourly value to: %f", water_val_hour);
                return (water_val_hour);
              }else{
                ESP_LOGI("main", "Skip setting hourly value");
                return id(hour_value);
              };
              id(waterhour).publish_state(id(hour_value));

        - globals.set:
            id: daily_value
            value: !lambda |-
              if((water_val_day) and (water_val_day)>0.001){
                ESP_LOGI("main", "Set daily value to: %f", water_val_day);
                return (water_val_day);
              }else{
                ESP_LOGI("main", "Skip setting hourly value");
                return id(hour_value);
              };
              id(waterday).publish_state(id(daily_value));

        - globals.set:
            id: yesterday_value
            value: !lambda |-
              if((water_val_yesterday) and (water_val_yesterday)>0.001){
                ESP_LOGI("main", "Set yesterday value to: %f", water_val_yesterday);
                return (water_val_yesterday);
              }else{
                ESP_LOGI("main", "Skip setting yesterday value");
                return id(yesterday_value);
              };
              id(wateryesterday).publish_state(id(hour_value));

        - globals.set:
            id: week_value
            value: !lambda |-
              if((water_val_week) and (water_val_week)>0.001){
                ESP_LOGI("main", "Set weekly value to: %f", water_val_week);
                return (water_val_week);
              }else{
                ESP_LOGI("main", "Skip setting weekly value");
                return id(week_value);
              };
              id(waterweek).publish_state(id(week_value));

        - globals.set:
            id: month_value
            value: !lambda |-
              if((water_val_month) and (water_val_month)>0.001){
                ESP_LOGI("main", "Set last montj value to: %f", water_val_month);
                return (water_val_month);
              }else{
                ESP_LOGI("main", "Skip setting monthly value");
                return id(week_value);
              };
              id(watermonth).publish_state(id(month_value));

        - globals.set:
            id: lastmonth_value
            value: !lambda |-
              if((water_val_lastmonth) and (water_val_lastmonth)>0.001){
                ESP_LOGI("main", "Set last month value to: %f", water_val_lastmonth);
                return (water_val_lastmonth);
              }else{
                ESP_LOGI("main", "Skip setting last month value");
                return id(lastmonth_value);
              };
              id(waterlastmonth).publish_state(id(lastmonth_value));

        - globals.set:
            id: year_value
            value: !lambda |-
              if((water_val_year) and (water_val_year)>0.001){
                ESP_LOGI("main", "Set last yearly value to: %f", water_val_year);
                return (water_val_year);
              }else{
                ESP_LOGI("main", "Skip setting last yearly value");
                return id(week_value);
              };
              id(wateryear).publish_state(id(year_value));

        - logger.log:
            format: "All new Values set: hour: %.1f, day: %.1f, week: %.1f, month: %.1f, lastmonth: %.1f, year: %.1f"
            args:
              [
                "id(hour_value)",
                "id(daily_value)",
                "id(week_value)",
                "id(month_value)",
                "id(lastmonth_value)",
                "id(year_value)",
              ]

## ---------------------------------------------------
## SNTP Time server
## ---------------------------------------------------
time:
  - platform: sntp
    id: time_sntp
    timezone: Europe/Berlin
    servers:
      - 0.at.pool.ntp.org
      - 0.pool.ntp.org
      - 1.pool.ntp.org

    on_time_sync:
      then:
        - logger.log: "Synchronized sntp clock"

    # reset hourly value
    on_time:
      - seconds: 0
        minutes: 0
        then:
          - globals.set:
              id: hour_value
              value: "0.00"
          - lambda: id(waterhour).publish_state(id(hour_value));
          - logger.log: Reset value hour, starting next hour

      # reset daily value and set yesterday value
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: id(yesterday_value)=id(daily_value);
          - lambda: id(wateryesterday).publish_state(id(yesterday_value));
          - lambda: id(daily_value)=0.00;
          - lambda: id(waterday).publish_state(id(daily_value));
          - logger.log: Set yesterday value and reset value daily, starting new day

      # reset weekly value, start new week
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - globals.set:
              id: week_value
              value: "0.00"
          - lambda: id(waterweek).publish_state(id(week_value));
          - logger.log: Reset value weekly, starting new week

      # reset monthly value and set last month value
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - globals.set:
              id: month_value
              value: "0.00"
          - lambda: id(watermonth).publish_state(id(month_value));
          - lambda: |-
              if(id(waterdisplay).state){
                id(lastmonth_value)=id(waterdisplay).state;
              }
          - logger.log: Reset value monthly, starting new month

      # new year, reset yearly value
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        months: JAN
        then:
          - globals.set:
              id: year_value
              value: "0.00"
          - lambda: id(wateryear).publish_state(id(year_value));
          - logger.log: Reset value yearly, starting new year

## ---------------------------------------------------
## WMBUS DEVICE NODEMCU V3 --> CC1101
## ---------------------------------------------------
##
##                                       | GND
##                                       2
##     - - - - - - - - - - - - - - - - - o -
##   |                                       |
## - | ANT        NODEMCU V3                 | -- USB
##   |                                       |
##     - o o - - - o o o o - - - - - - - - o
##       7 6       4 5 3 8                 1    .... CC1101
##       | |       | | | |                 |
##       | |   SCK | | | | CSN             | 3.3V
##        GD02     | | | |
##      GDO0        MISO
##                    MOSI
##
##
## -------------------------------------------------
wmbus:
  mosi_pin: GPIO13 #D7:3  MOSI Attached to Hardware SPI controller MOSI SPI Interface
  miso_pin: GPIO12 #D6:5  MISO Attached to Hardware SPI controller MISO SPI Interface
  clk_pin: GPIO14 #D5:4  SCK  Attached to Hardware SPI controller CLK
  cs_pin: GPIO15 #D8:8  CSN  Attached to Hardware SPI controller, Controls Boot Mode; CS SPI Interface 10k Pull-Down, boot fails if pulled high !!!
  gdo0_pin: GPIO05 #D1:7  Clock output. High Impedance !
  gdo2_pin: GPIO04 #D2:6  FIFO status signals. High Impedance !

  # log_unknown (Optional): Show telegrams from not configured meters in log. Defaults to False
  log_unknown: False

## ---------------------------------------------------
## SWITCHES
## ---------------------------------------------------
switch:
  # reset boot counter value
  - platform: template
    name: "Reset Boot Counter"
    turn_on_action:
      then:
        - lambda: |-
            id(boot_counter) = 0;
            id(bootcounter).publish_state(id(boot_counter));
        - logger.log:
            level: INFO
            tag: "BOOT"
            format: "${device_name_short} reset boot counter o.k!"

  # reset all global vars
  - platform: template
    name: "Reset values"
    turn_on_action:
      then:
        - lambda: |-
            id(last_value) = 0.00;
            id(boot_counter) = 0;
            id(bootcounter).publish_state(id(boot_counter));
            id(current_value) = 0.00;
            id(watercurrent).publish_state(id(current_value));
            id(hour_value) = 0.00;
            id(waterhour).publish_state(id(hour_value));
            id(daily_value) = 0.00;
            id(waterday).publish_state(id(daily_value));
            id(yesterday_value) = 0.00;
            id(wateryesterday).publish_state(id(yesterday_value));
            id(week_value) = 0.00;
            id(waterweek).publish_state(id(week_value));
            id(month_value) = 0.00;
            id(watermonth).publish_state(id(month_value));
            id(lastmonth_value) = 0.00;
            id(waterlastmonth).publish_state(id(lastmonth_value));
            id(year_value) = 0.00;
            id(wateryear).publish_state(id(year_value));
        - logger.log: all values reset!

  # restarts the device
  - platform: restart
    name: "Restart"
    id: restart_switch

## ---------------------------------------------------
## SENSORS
## ---------------------------------------------------
sensor:
  - platform: wmbus

    # Meter ID (usually from sticker). Can be specified as decimal or hex.
    # only hex is working for my watermeter !
    # see: https://github.com/SzczepanLeon/esphome-components/issues/6
    # edit watermeterid in the secrets file
    ## add_prefix settings to add the watermeterid to the lqi, rssi and total_water_m3
    meter_id: !secret watermeterId
    type: izar
    add_prefix: false

    # The LQI value reported by the CC1101 is a 7 bit unsigned number with a range from 0 to 127.
    # Note that a lower value indicates a better link.
    # The LQI of a received packet will be bad (higher number) when there is lot of interference.
    lqi:
      id: wmbus_cc1101_lqi
      name: "Watermeter CC1101 LQI"
      entity_category: "diagnostic"
      unit_of_measurement: "lqi"
      state_class: "measurement"

    # The RSSI value reported by the CC1101 is a 8 bit signed number with an effective
    # range from -138 dBm to -10.5 dBm when the CC1101 is operating around 868 MHz.
    # RSSI stands for received signal strength (power) indication (in dBm).
    # A higher value indicates higher power. (internal only)
    rssi:
      id: wmbus_cc1101_rssi

    # get the total watermter m3 from the wmbus telegram, log the timestamp
    # for the last reading  and calculates the statitics value
    # and update all sensors: last_value, watercurrent, hour_value, daily_value
    # week_value, month_value, year_value and watermeter_lastupdate
    total_water_m3:
      name: "Wasseruhr Anzeige"
      id: "waterdisplay"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: "water"
      accuracy_decimals: 3
      on_value:
        then:
          - lambda: |-
              ESP_LOGI("SENSOR", "Water Display value: %f, last value: %f", id(waterdisplay).state, id(last_value));
              if ((id(last_value) > 0.00) and (id(waterdisplay).state)>(id(last_value)) ) {
                id(current_value) = float( id(waterdisplay).state - id(last_value) ) * 1000.00;
                id(watercurrent).publish_state(id(current_value));
                id(hour_value)+=id(current_value);
                id(waterhour).publish_state(id(hour_value));
                id(daily_value)+=id(current_value);
                id(waterday).publish_state(id(daily_value));
                id(week_value)+=id(current_value);
                id(waterweek).publish_state(id(week_value));
                id(month_value)+=id(current_value);
                id(watermonth).publish_state(id(month_value));
                id(year_value)+=id(current_value);
                id(wateryear).publish_state(id(year_value));
                ESP_LOGI("SENSOR", "Set current value to %f litre and publish the data", id(watercurrent));
              }else{
                id(current_value) = 0.00;
                id(watercurrent).publish_state(id(current_value));
                ESP_LOGI("SENSOR", "Reset current value to: %f", id(watercurrent));
              }
              id(last_value)=id(waterdisplay).state;

          # update the timestamp for the last waterdisplay state
          - text_sensor.template.publish:
              id: watermeter_lastupdate
              state: !lambda return id(time_sntp).now().strftime("%Y-%m-%dT%H:%M:%S");

    # get the last month total watermter m3 from the wmbus telegram
    last_month_total_water_m3:
      name: "Wasseruhr Anzeige letzter Monat"
      id: "waterdisplay_lastmonth"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: "water"
      accuracy_decimals: 3

  # water current
  - platform: template
    name: Wasser Aktuell
    id: "watercurrent"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    state_class: "measurement"
    device_class: "water"
    lambda: return (id(current_value));

  # water current hour
  - platform: template
    name: Wasser Stunde
    id: "waterhour"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    state_class: total_increasing
    device_class: "water"
    lambda: return (id(hour_value));

  # water today
  - platform: template
    name: Wasser Tag
    id: "waterday"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    device_class: "water"
    state_class: total_increasing
    lambda: return (id(daily_value));

  # water yesterday
  - platform: template
    name: Wasser Gestern
    id: "wateryesterday"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    device_class: "water"
    state_class: total_increasing
    lambda: return (id(yesterday_value));

  # water current week
  - platform: template
    name: Wasser Woche
    id: "waterweek"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    device_class: "water"
    state_class: total_increasing
    lambda: return (id(week_value));

  # water current month
  - platform: template
    name: Wasser Monat
    id: "watermonth"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    state_class: total_increasing
    device_class: "water"
    lambda: return (id(month_value));

  # water current year
  - platform: template
    name: Wasser Jahr
    id: "wateryear"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    state_class: total_increasing
    device_class: "water"
    lambda: return (id(year_value));

  # water last month
  - platform: template
    name: Wasser letzer Monat
    id: "waterlastmonth"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    state_class: "measurement"
    device_class: "water"
    lambda: return (id(lastmonth_value));

  # device boot counter
  - platform: template
    name: Boot counter
    id: bootcounter
    accuracy_decimals: 0
    state_class: "measurement"
    entity_category: "diagnostic"
    lambda: return (id(boot_counter));

  # Wifi quality RSSI used by wifi_signal_db
  - platform: wifi_signal
    id: wifi_signal_db
    update_interval: 60s
    internal: true
    disabled_by_default: true

  # Wifi quality RSSI in percentage
  # Received Signal Strength (RSSI) is a measure of incoherent (raw) RF power in a channel.
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "Watermeter WLAN RSSI"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # CC1101 quality RSSI in percentage
  # Received Signal Strength (RSSI) is a measure of incoherent (raw) RF power in a channel.
  - platform: copy
    source_id: wmbus_cc1101_rssi
    name: "Watermeter CC1101 RSSI"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # update the uptime_human with the uptime
  - platform: uptime
    id: uptime_sensor
    update_interval: 60s
    internal: True
    disabled_by_default: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

## ---------------------------------------------------
## BINARY SENSOR
## ---------------------------------------------------
binary_sensor:
  # simulate led state
  - platform: template
    name: "Watermeter Status Led"
    id: statusled
    entity_category: "diagnostic"
    lambda: "return id(current_value) > 0;"

## ---------------------------------------------------
## TEXT SENSOR
## ---------------------------------------------------
text_sensor:
  # online time for the device, only for the gui
  - platform: template
    name: "Watermeter Online seit"
    disabled_by_default: true
    id: uptime_human
    icon: mdi:clock-start

  # waterdisplay timestamp last update
  - platform: template
    name: "Watermeter Timestamp"
    id: watermeter_lastupdate
    icon: mdi:clock-start
    entity_category: "diagnostic"

  # device timestamp
  - platform: template
    id: systime
    entity_category: "diagnostic"
    internal: true
    lambda: char str[20];
      time_t currTime = id(time_sntp).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%dT%H:%M:%S", localtime(&currTime));
      return (std::string) str;

  # simple rest get message for all watermeter data
  - platform: template
    id: watermeterdata
    internal: true
    disabled_by_default: true
    lambda: |-
      char buf[128];
      sprintf(buf, "%.3f|%.3f|%.3f|%.3f|%.3f|%.3f|%.3f|%.3f|%.3f|%s",
             id(waterdisplay).state,
             id(current_value),
             id(hour_value),
             id(daily_value),
             id(yesterday_value),
             id(week_value),
             id(month_value),
             id(lastmonth_value),
             id(year_value),
             id(systime).state.c_str()
             );
      std::string s = buf;
      return s;
